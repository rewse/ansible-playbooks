---
- name: set timezone
  timezone:
    name: Asia/Tokyo
  tags: [common, time]

- name: check swap status
  command: cat /proc/swaps
  register: swaps_out
  changed_when: False
  tags: [common, storage, swap]

- name: make swap
  command: mkswap /dev/{{swap_device_name}}
  when: swaps_out.stdout.find('{{swap_device_name}}') == -1
  tags: [common, storage, swap]

- name: enable swap
  command: swapon /dev/{{swap_device_name}}
  when: swaps_out.stdout.find('{{swap_device_name}}') == -1
  tags: [common, storage, swap]

- name: add swap into fstab
  mount:
    name: swap
    src: /dev/{{swap_device_name}}
    fstype: swap
    opts: default
    state: present
  tags: [common, storage, swap]

- name: get enforce
  command: getenforce
  register: getenforce_out
  changed_when: False
  tags: [common, selinux]

- name: set enforce to 0
  command: setenforce 0
  when: getenforce_out.stdout.find('Disabled') == -1
  tags: [common, selinux]

- name: disable selinux
  selinux:
    state: disabled
  tags: [common, selinux]

- name: install additional packages
  yum:
    name: "{{item}}"
    state: installed
  with_items:
    - at
    - bash-completion
    - bc
    - bind-utils
    - dstat
    - epel-release
    - firewalld
    - git
    - logwatch
    - lsof
    - mlocate
    - net-tools
    - nfs-utils
    - patch
    - perl-libwww-perl
    - prelink
    - source-highlight
    - sysstat
    - telnet
    - tmux
    - tree
    - unzip
    - vim-enhanced
    - yum-cron
    - yum-plugin-priorities
  tags: [common, package]

- name: install additional packages from EPEL
  yum:
    name: "{{item}}"
    state: installed
  with_items:
    - etckeeper
  tags: [common, epel, package]

- name: download get-pip.py
  get_url:
    url: https://bootstrap.pypa.io/get-pip.py
    dest: /tmp
  tags: [common, package, pip]

- name: run get-pip.py
  command: python /tmp/get-pip.py
  tags: [common, package, pip]

- name: install packages with pip
  pip:
    name: "{{item}}"
  with_items:
    - awscli
  tags: [common, package, pip]

- name: update all packages
  yum:
    name: '*'
    state: latest
  tags: [common, package]

- name: etckeeper; init /etc
  command: etckeeper init
  args:
      creates: /etc/.git
  tags: [common, etckeeper]

- name: etckeeper; Initial commit
  command: etckeeper commit "Initial commit"
  args:
    chdir: /etc
    creates: /etc/.git/logs
  tags: [common, etckeeper]

- name: add priority into /etc/yum.repos.d/CentOS-Base.repo
  ini_file:
    dest: /etc/yum.repos.d/CentOS-Base.repo
    section: "{{item}}"
    option: priority
    value: 10
    no_extra_spaces: True
  with_items:
    - base
    - updates
    - extras
  tags: [common, package]

- name: add priority into /etc/yum.repos.d/epel.repo
  ini_file:
    dest: /etc/yum.repos.d/epel.repo
    section: epel
    option: priority
    value: 50
    no_extra_spaces: True
  tags: [common, epel, package]

- name: disable the unnecessary services
  service:
    name: "{{item}}"
    enabled: no
    state: stopped
  with_items:
    - firewalld
    - kdump
    - sysstat
  tags: [common, package]

- name: postfix; change myorigin
  lineinfile:
    dest: /etc/postfix/main.cf
    insertafter: '^#myorigin '
    regexp: '^myorigin '
    line: 'myorigin = rewse.jp'
  notify: reload postfix
  tags: [common, postfix]

- name: postfix; change relayhost
  lineinfile:
    dest: /etc/postfix/main.cf
    insertafter: '^#relayhost '
    regexp: '^relayhost '
    line: 'relayhost = [{{relayhost.name}}]:{{relayhost.port}}'
  notify: reload postfix
  tags: [common, postfix]

- name: postfix; set smtp_sasl_auth_enable
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: '^smtp_sasl_auth_enable '
    line: 'smtp_sasl_auth_enable = yes'
  notify: reload postfix
  tags: [common, postfix]

- name: postfix; set smtp_sasl_password_maps
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: 'smtp_sasl_password_maps '
    line: 'smtp_sasl_password_maps = hash:/etc/postfix/sasl_passwd'
  notify: reload postfix
  tags: [common, postfix]

- name: postfix; set smtp_sasl_security_options
  lineinfile:
    dest: /etc/postfix/main.cf
    regexp: 'smtp_sasl_security_options '
    line: 'smtp_sasl_security_options = noplaintext, noanonymous'
  notify: reload postfix
  tags: [common, postfix]

- name: postfix; create sasl_passwd
  lineinfile:
    dest: /etc/postfix/sasl_passwd
    regexp: '^\[{{relayhost.name}}\]:{{relayhost.port}}'
    line: '[{{relayhost.name}}]:{{relayhost.port}} {{so_net.username}}:{{so_net.password}}'
    create: yes
    mode: 0600
  register: postfix_sasl_password_res
  tags: [common, postfix]

- name: postfix; create sasl_passwd.db
  file:
    path: /etc/postfix/sasl_passwd.db
    state: file
    mode: 0600
  tags: [common, postfix]

- name: postfix; hash sasl_passwd
  command: postmap hash:/etc/postfix/sasl_passwd
  when: postfix_sasl_password_res|changed
  notify: reload postfix
  tags: [common, postfix]

- name: install sasl packages
  yum:
    name: "{{item}}"
    state: installed
  with_items:
    - cyrus-sasl-md5
    - cyrus-sasl-plain
  notify: restart postfix
  tags: [common, postfix]

- name: wirte root mail alias
  lineinfile:
    dest: /etc/aliases
    insertbefore: '^# Basic '
    line: 'root: {{email.secondary}}'
  tags: [common, postfix, aliases]

- name: wirte centos mail alias
  lineinfile:
    dest: /etc/aliases
    insertbefore: '^# Basic '
    line: 'centos: root'
  tags: [common, postfix, aliases]

- name: enable mail alias
  command: newaliases
  tags: [common, postfix, aliases]

- name: anacron; change start_hours_range
  lineinfile:
    dest: /etc/anacrontab
    insertafter: '^#START_HOURS_RANGE'
    regexp: '^START_HOURS_RANGE'
    line: 'START_HOURS_RANGE=3-7'
  tags: [common, anacron]

- name: cloud-init; add preserve_hostname
  lineinfile:
    dest: /etc/cloud/cloud.cfg
    insertbefore: '^# vim:syntax'
    regexp: '^preserve_hostname'
    line: 'preserve_hostname: true'
  tags: [common, cloud-init]

- name: copy profile.d/pathmunge.sh
  copy:
    src: pathmunge.sh
    dest: /etc/profile.d
  tags: [common, bash]

- name: input; set editing-mode to vi
  lineinfile:
    dest: /etc/inputrc
    regexp: 'set editing-mode '
    line: 'set editing-mode vi'
  tags: [common, input]

- name: create journal dir
  file:
    path: /var/log/journal
    state: directory
    group: systemd-journal
    mode: 02755
  tags: [common, journal]

- name: logwatch; disable all services
  lineinfile:
    dest: /usr/share/logwatch/default.conf/logwatch.conf
    insertbefore: '^# You can also disable'
    regexp: '^#? ?Service = All'
    line: '# Service = All'
  tags: [common, logwatch]

- name: logwatch; enable yum
  lineinfile:
    dest: /usr/share/logwatch/default.conf/logwatch.conf
    insertafter: '^#Service = pam'
    regexp: '^Service = yum'
    line: 'Service = yum'
  tags: [common, logwatch]

- name: rsyslog; add a template
  copy:
    src: 00-template.conf
    dest: /etc/rsyslog.d
  notify: restart rsyslog
  tags: [common, rsyslog]

  # See also "Bug 1072368 - user manager message flood"
  # <https://bugzilla.redhat.com/show_bug.cgi?id=1072368>. Do not use
  # <https://access.redhat.com/solutions/1564823> because it's not enough.
- name: rsyslog; ignore systemd-logind
  copy:
    src: systemd-logind.conf
    dest: /etc/rsyslog.d
  notify: restart rsyslog
  tags: [common, rsyslog]

- name: ssh; change ClientAliveInterval
  lineinfile:
    dest: /etc/ssh/sshd_config
    insertafter: '^#ClientAliveInterval'
    regexp: '^ClientAliveInterval'
    line: 'ClientAliveInterval 59'
  notify: restart sshd
  tags: [common, ssh]

- name: ssh; change ServerAliveInterval
  lineinfile:
    dest: /etc/ssh/ssh_config
    regexp: '^.*ServerAliveInterval'
    line: '  ServerAliveInterval 59'
  tags: [common, ssh]

- name: add NTP servers
  blockinfile:
    dest: /etc/chrony.conf
    insertafter: '^# Please consider joining the pool'
    content: |
      server ntp.nict.jp iburst
      server ntp.jst.mfeed.ad.jp iburst
      server ats1.e-timing.ne.jp iburst
  notify: restart chronyd
  tags: [common, time, chrony]

- name: yum-cron; enable auto-update
  ini_file:
    dest: /etc/yum/yum-cron.conf
    section: commands
    option: apply_updates
    value: yes
  notify: restart yum-cron
  tags: [common, yum-cron]

- name: yum-cron; enable yum-cron
  service:
    name: yum-cron
    enabled: yes
  notify: restart yum-cron
  tags: [common, yum-cron]

- name: add a group for admin user
  group:
    name: "{{admin}}"
    gid: 1001
  tags: [common, user]

- name: add admin user
  user:
    name: "{{admin}}"
    uid: 1001
    group: "{{admin}}"
    groups: 'adm,wheel,systemd-journal'
    skeleton: /etc/skel
  tags: [common, user]

- name: allow sudo to admin user
  lineinfile:
    dest: /etc/sudoers.d/00-{{admin}}
    regexp: '^{{admin}}'
    line: '{{admin}} ALL=(ALL) NOPASSWD: ALL'
    create: yes
    mode: 0440
    validate: 'visudo -cf %s'
  tags: [common, user]

- name: make .ssh dir for admin user
  file:
    path: /home/{{admin}}/.ssh
    owner: "{{admin}}"
    group: "{{admin}}"
    state: directory
    mode: 0700
  tags: [common, user]

- name: copy authorized_keys
  copy:
    src: /home/centos/.ssh/authorized_keys
    dest: /home/{{admin}}/.ssh/authorized_keys
    remote_src: True
    owner: "{{admin}}"
    group: "{{admin}}"
    mode: 0600
  tags: [common, user]

- name: copy id_rsa
  become_user: "{{admin}}"
  copy:
    src: ~/.ssh/id_rsa
    dest: /home/{{admin}}/.ssh/id_rsa
    mode: 0600
    follow: yes
  tags: [common, user]

- name: copy id_rsa.pub
  become_user: "{{admin}}"
  copy:
    src: ~/.ssh/id_rsa.pub
    dest: /home/{{admin}}/.ssh/id_rsa.pub
    follow: yes
  tags: [common, user]

- name: copy .ssh/config
  template:
    src: config
    dest: /home/{{admin}}/.ssh
    owner: "{{admin}}"
    group: "{{admin}}"
  tags: [common, user]

- name: clone dotfiles.git
  git:
    repo: git@github.com:rewse/dotfiles.git
    dest: /srv/git/dotfiles
    accept_hostkey: yes
    key_file: /home/{{admin}}/.ssh/id_rsa
  tags: [common, dotfiles]

- name: change mode of git/dotfiles
  file:
    path: /srv/git/dotfiles
    owner: "{{admin}}"
    group: "{{admin}}"
    recurse: yes
  tags: [common, dotfiles]

- name: copy bash_profile
  copy:
    src: /srv/git/dotfiles/bash_profile
    dest: /etc/profile.d/bash_profile.sh
    remote_src: True
  tags: [common, dotfiles, bash]

- name: copy bashrc
  copy:
    src: /srv/git/dotfiles/bashrc
    dest: /etc/profile.d/bashrc.sh
    remote_src: True
  tags: [common, dotfiles, bash]

- name: copy gitconfig
  become_user: "{{admin}}"
  copy:
    src: /srv/git/dotfiles/gitconfig
    dest: /home/{{admin}}/.gitconfig
    remote_src: True
  tags: [common, dotfiles, git]

- name: git; set user email
  become_user: "{{admin}}"
  ini_file:
    dest: /home/{{admin}}/.gitconfig
    section: user
    option: email
    value: "{{email}}"
  tags: [common, dotfiles, git]

- name: tmux; copy tmux.conf
  copy:
    src: /srv/git/dotfiles/tmux.conf
    dest: /etc/tmux.conf
    remote_src: True
  tags: [common, dotfiles, tmux]

- name: vim; copy vimfiles
  copy:
    src: /srv/git/dotfiles/vim/{{item}}
    dest: /usr/share/vim/vimfiles/{{item}}
    remote_src: True
  with_items:
    - colors/base16-tomorrow.vim
    - ftplugin/python_match.vim
    - plugin/matrix.vim
    - plugin/NERD_commenter.vim
    - vimrc
  tags: [common, dotifiles, vim]

- name: vim; add to import vimrc
  lineinfile:
    dest: /etc/vimrc
    line: 'source /usr/share/vim/vimfiles/vimrc'
  tags: [common, dotifiles, vim]

- name: create .aws dir
  file:
    path: /root/.aws
    state: directory
  tags: [srv, snapshot]

- name: create .aws/config
  file:
    path: /root/.aws/config
    state: touch
    mode: 0600
  tags: [srv, snapshot]

- name: create .aws/credentials
  file:
    path: /root/.aws/credentials
    state: touch
    mode: 0600
  tags: [srv, snapshot]

- name: Set aws config
  ini_file:
    dest: /root/.aws/config
    section: default
    option: region
    value: ap-northeast-1
  tags: [srv, snapshot]

- name: Set aws_access_key_id
  ini_file:
    dest: /root/.aws/credentials
    section: default
    option: aws_access_key_id
    value: "{{aws.access_key_id}}"
  tags: [srv, snapshot]

- name: Set aws_secret_access_key
  ini_file:
    dest: /root/.aws/credentials
    section: default
    option: aws_secret_access_key
    value: "{{aws.secret_access_key}}"
  tags: [srv, snapshot]

- name: clone aws-ec2-smart-snapshot
  git:
    repo: git@github.com:rewse/aws-ec2-smart-snapshot.git
    dest: /srv/git/aws-ec2-smart-snapshot
    accept_hostkey: yes
    key_file: /home/{{admin}}/.ssh/id_rsa
  tags: [srv, snapshot]

- name: change mode of git/dotfiles
  file:
    path: /srv/git/aws-ec2-smart-snapshot
    owner: "{{admin}}"
    group: "{{admin}}"
    recurse: yes
  tags: [srv, snapshot]

- name: copy aws-ec2-smart-snapshot
  copy:
    src: /srv/git/aws-ec2-smart-snapshot{{item}}
    dest: "{{item}}"
    remote_src: yes
  with_items:
    - /usr/local/sbin/aws-ec2-smart-snapshot
    - /etc/cron.daily/00-aws-ec2-smart-snapshot.cron
    - /etc/logrotate.d/aws-ec2-smart-snapshot
  tags: [srv, snapshot]

- name: change perm of aws-ec2-smart-snapshot
  file:
    path: "{{item}}"
    mode: 0775
  with_items:
    - /usr/local/sbin/aws-ec2-smart-snapshot
    - /etc/cron.daily/00-aws-ec2-smart-snapshot.cron
  tags: [srv, snapshot]

- name: create log/aws-ec2-smart-snapshot.log
  file:
    path: /var/log/aws-ec2-smart-snapshot.log
    state: touch
    mode: 0600
  tags: [srv, snapshot]
